#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"

// Define the Data_t structure
typedef struct {
    uint8_t dataID;
    int32_t DataValue;
} Data_t;

// Global variables
int32_t G_DataValue; // Assume updated elsewhere
uint8_t G_DataID;    // Assume updated elsewhere
QueueHandle_t Queue1;
TaskHandle_t TaskHandle_1;
TaskHandle_t TaskHandle_2;

// Task 1: Sends data to Queue1 every 500ms
void ExampleTask1(void *pV) {
    Data_t data;
    const TickType_t xDelay = pdMS_TO_TICKS(500); // 500ms delay

    while (1) {
        // Populate data structure with global variables
        data.dataID = G_DataID;
        data.DataValue = G_DataValue;

        // Send data to Queue1
        if (xQueueSend(Queue1, &data, portMAX_DELAY) != pdPASS) {
            printf("Failed to send data to Queue1\n");
        }

        // Precise delay of 500ms
        vTaskDelay(xDelay);
    }
}

// Task 2: Receives data from Queue1 and processes it
void ExampleTask2(void *pV) {
    Data_t data;
    UBaseType_t originalPriority = uxTaskPriorityGet(NULL); // Get initial priority

    while (1) {
        // Receive data from Queue1
        if (xQueueReceive(Queue1, &data, portMAX_DELAY) == pdPASS) {
            // Print dataID and DataValue
            printf("Received: dataID = %u, DataValue = %ld\n", data.dataID, data.DataValue);

            // Process based on dataID
            if (data.dataID == 0) {
                // Delete ExampleTask2
                vTaskDelete(NULL);
            } else if (data.dataID == 1) {
                // Process DataValue
                if (data.DataValue == 0) {
                    // Increase priority by 2
                    vTaskPrioritySet(NULL, originalPriority + 2);
                    printf("Increased priority to %u\n", originalPriority + 2);
                } else if (data.DataValue == 1) {
                    // Decrease priority if previously increased
                    if (uxTaskPriorityGet(NULL) > originalPriority) {
                        vTaskPrioritySet(NULL, originalPriority);
                        printf("Restored priority to %u\n", originalPriority);
                    }
                } else if (data.DataValue == 2) {
                    // Delete ExampleTask2
                    vTaskDelete(NULL);
                }
            }
        }
    }
}

// Main function to initialize tasks and queue
void app_main(void) {
    // Create Queue1 with size 5 and Data_t type
    Queue1 = xQueueCreate(5, sizeof(Data_t));
    if (Queue1 == NULL) {
        printf("Failed to create Queue1\n");
        return;
    }

    // Create ExampleTask1 with priority 2
    if (xTaskCreate(ExampleTask1, "Task1", 2048, NULL, 2, &TaskHandle_1) != pdPASS) {
        printf("Failed to create ExampleTask1\n");
        return;
    }

    // Create ExampleTask2 with priority 1
    if (xTaskCreate(ExampleTask2, "Task2", 2048, NULL, 1, &TaskHandle_2) != pdPASS) {
        printf("Failed to create ExampleTask2\n");
        return;
    }

    printf("Tasks and Queue initialized successfully\n");
}
